#!/usr/bin/env node

/**
 * RN 资源打包(Zip包. 配合 npm scripts 使用)
 * @author 李永凯（liyongkai@xiaoyouzi.com）
 * @log
 *   2016-11-30
 *   1. 修改成Promise方式 @by zhuzhenyu@xiaoyouzi.com
 *   2017-01-24
 *   1. 添加打内置包功能 @by liyongkai@xiaoyouzi.com
 */

'use strict';

const path = require('path');
const Q = require('q');
const chalk = require('chalk');
const yargs = require('yargs');
const shell = require('shelljs');

const argv = yargs.usage('Usage: bundle [options]')
  .example('bundle --platform ios -z/--zip -i/--inline -d/--dev')
  .options({
    p: {
      alias: 'platform',
      demand: true,
      choices: ['ios', 'android'],
      describe: '打包对应平台[ios|android]',
      type: 'string'
    },
    z: {
      alias: 'zip',
      describe: '是否zip打包[true|false]',
      boolean: true
    },
    i: {
      alias: 'inline',
      describe: '是否打内置包[true|false]',
      boolean: true
    },
    d: {
      alias: 'dev',
      describe: '是否开发环境[true|false]',
      boolean: true
    }
  })
  .help('h')
  .alias('h', 'help')
  .epilog('copyright 2016')
  .argv;

const BUNDLE_DIR = path.join(process.cwd(), 'build');
const ZIP_DIR = path.join(process.cwd(), 'build');
const INLINE_DIR = path.join(process.cwd(), 'build');

const platform = argv.platform;
const zip = argv.zip;
const inline = argv.inline;
const dev = argv.dev;

const projectName = process.env.npm_package_name.replace('rn-', '');
const platformDir = path.join(BUNDLE_DIR, platform);
const platformInline = platform + '-inline';
const platformInlineDir = path.join(INLINE_DIR, platformInline);

function cleanBuildDir() {
  console.log(chalk.cyan('清空build/' + platform + '目录...'));

  let deferred = Q.defer();
  let command = [
    'rm -rf ' + platformDir,
    'mkdir -p ' + platformDir
  ].join(' && ');

  shell.exec(command, (code, stdout, stderr) => {
    if (code === 0) {
      console.log(chalk.green('build/' + platform + '目录清空完成'));
      deferred.resolve();
    } else {
      console.log(chalk.red('build/' + platform + '目录清空失败'));
      deferred.reject(stderr);
    }
  });

  return deferred.promise;
}

function createBundle() {
  console.log(chalk.cyan('开始打包' + platform + '平台代码...'));

  let deferred = Q.defer();
  let command = [
    'react-native bundle --entry-file index.' + platform + '.js --platform ' + platform + ' --dev ' + dev + ' --bundle-output ' + platformDir + '/index.' + platform + '.bundle --assets-dest ' + platformDir
  ].join(' && ');

  shell.exec(command, function(code, stdout, stderr) {
    if (code == 0) {
      console.log(chalk.green(platform + '平台代码打包成功'));
      deferred.resolve();
    } else {
      console.log(chalk.red(platform + '平台代码打包失败'));
      deferred.reject(stderr);
    }
  });

  return deferred.promise;
}

function createZip() {
  let deferred = Q.defer();

  if (!zip) {
    deferred.resolve();
  } else {
    console.log(chalk.cyan('开始生成' + platform + '平台zip包...'));

    let command = [
      'mkdir -p ' + ZIP_DIR,
      'cd ' + platformDir,
      'zip -r ' + platform + '.zip ./*',
      'cd ' + ZIP_DIR,
      'rm -rf ' + platform + '.zip',
      'mv ' + platformDir + '/' + platform + '.zip .'
    ].join(' && ');

    shell.exec(command, function(code, stdout, stderr) {
      if (code == 0) {
        console.log(chalk.green('成功生成' + platform + '平台zip包'));
        deferred.resolve();
      } else {
        console.log(chalk.red('生成' + platform + '平台zip包失败'));
        deferred.reject(stderr);
      }
    });
  }

  return deferred.promise;
}

function createInline() {
  let deferred = Q.defer();

  if (!inline) {
    deferred.resolve();
  } else {
    console.log(chalk.cyan('开始生成' + platform + '平台内置包...'));

    let command = [
      'mkdir -p ' + INLINE_DIR,
      'rm -rf ' + platformInlineDir,
      'cp -rf ' + platformDir + ' ' + platformInlineDir,
      'cd ' + platformInlineDir,
      'mv index.' + platform + '.bundle ' + projectName + '.bundle',
      'mv index.' + platform + '.bundle.meta ' + projectName + '.bundle.meta',
      'zip -r ' + platformInline + '.zip ./*',
      'cd ' + INLINE_DIR,
      'rm -rf ' + platformInline + '.zip',
      'mv ' + platformInlineDir + '/' + platformInline + '.zip .',
      'rm -rf ' + platformInlineDir
    ].join(' && ');

    shell.exec(command, function(code, stdout, stderr) {
      if (code == 0) {
        console.log(chalk.green('成功生成' + platform + '平台内置包'));
        deferred.resolve();
      } else {
        console.log(chalk.red('生成' + platform + '平台内置包失败'));
        deferred.reject(stderr);
      }
    });
  }

  return deferred.promise;
}

cleanBuildDir()
  .then(createBundle)
  .then(createZip)
  .then(createInline)
  .then(() => {
    console.log(chalk.green('构建完成\n'));
  })
  .catch((stderr) => {
    console.log(chalk.red(stderr));
  });
